REDDIT API
--------------------------------------------------------------------------------

LISTINGS

Many endpoints on reddit use the same protocol for controlling pagination and filtering. These endpoints are called Listings and share five common parameters: after / before, limit, count, and show.

Listings do not use page numbers because their content changes so frequently. Instead, they allow you to view slices of the underlying data. Listing JSON responses contain after and before fields which are equivalent to the "next" and "prev" buttons on the site and in combination with count can be used to page through the listing.

The common parameters are as follows:

after / before - only one should be specified. these indicate the fullname of an item in the listing to use as the anchor point of the slice.
limit - the maximum number of items to return in this slice of the listing.
count - the number of items already seen in this listing. on the html site, the builder uses this to determine when to give values for before and after in the response.
show - optional parameter; if all is passed, filters such as "hide links that I have voted on" will be disabled.
To page through a listing, start by fetching the first page without specifying values for after and count. The response will contain an after value which you can pass in the next request. It is a good idea, but not required, to send an updated value for count which should be the number of items already fetched.

Caso queira usar limit para não vir muitos subreddits em um request, adicione "?limit=XXX" ao fim da request.

A primeira request não se manda after e não se manda count (pode mandar como 0, que é o valor defualt)

Se uma request vier com resposta com after != null, tem mais dados para pegar, passe "?limit=XXX&count=YYY&after=ZZZ", onde limit é o número de dados que se quer, count são quantos dados já se obteve e after o valor vindo do último request.

Para obter um raw json, utilize "?raw_json=1"

--------------------------------------------------------------------------------

FULLNAMES

A fullname is a combination of a thing's type (e.g. Link) and its unique ID which forms a compact encoding of a globally unique ID on reddit.

Fullnames start with the type prefix for the object's type, followed by the thing's unique ID in base 36. For example, t3_15bfi0.

type prefixes
t1_ -> Comment
t2_ -> Account
t3_ -> Link
t4_ -> Message
t5_ -> Subreddit
t6_ -> Award

--------------------------------------------------------------------------------

OAuth QUICK EXAMPLE

https://github.com/reddit-archive/reddit/wiki/OAuth2-Quick-Start-Example

Retrieve your reddit app id and secret on: https://www.reddit.com/prefs/apps

ATUENTICATE:
curl -i -X POST -d 'grant_type=password&username=<USERNAME>&password=<PASSWORD>' --user '<APP ID>:<APP SECRET>' https://www.reddit.com/api/v1/access_token -A "PostPersister/0.1 by <USERNAME>"

It will return a token that will last for one hour

TEST TOKEN:
curl -H "Authorization: bearer <TOKEN>" -A "PostPersister/0.1 by <USERNAME>" https://oauth.reddit.com/api/v1/me

--------------------------------------------------------------------------------

GET USER SUB REDITS SUBSCRIBED TO

https://www.reddit.com/dev/api/oauth#GET_subreddits_mine_subscriber

REQUEST CURL:
curl -i -H "Authorization: bearer <TOKEN>" -A "PostPersister/0.1 by <USERNAME>" "https://oauth.reddit.com/subreddits/mine/subscriber"

RESPOSTA:
JSON. Interessante vai estar em "requestResponse.data.children" que é um array com os posts. Cada elemento deste array:

    "title" é o título do subreddit
    "name" é o fullname do subreddit
    "display_name_prefixed" é quem será usado na URL para pegar posts
    "id" é o id do subreddit

--------------------------------------------------------------------------------

GET SUBREDDIT POSTS

https://www.reddit.com/dev/api/oauth#GET_hot
https://www.reddit.com/dev/api/oauth#GET_new
https://www.reddit.com/dev/api/oauth#GET_rising

REQUEST CURL:
curl -i -H "Authorization: bearer <TOKEN>" -A "PostPersister/0.1 by <USERNAME>" "https://oauth.reddit.com/r/funny/hot"

RESPOSTA:
JSON. Interessante vai estar em "requestResponse.data.children" que é um array com os posts. Cada elemento deste array:
    "name" será o fullname do post
    "id" será o id do post
    "title" será o título do post
    "is_self" indicará se o post é só um texto. Se sim, pode ser que o campo "post_hint" não exista... Verifique este campo 1o. Se for is_self, o conteúdo do texto será
    "post_hint" será o que o post é: image (gif vai como image) ("image"), link ("link"), vídeo ("rich:video" e "hosted:video") ou self ("self")
    Caso image, obtenha sua url em "url_overridden_by_dest".
    Caso vídeo, há 2 casos:
        "hosted:video" - vídeo que foi upado para o servidor do reddit. Obtenha sua url em "media.reddit_video.fallback_url". Hosted video terá apenas o vídeo na url em fallback_url, o audio estará no mesmo host com o final /audio (tem que juntar na mão). Caso "media.reddit_video.is_gif" sejá true, então o vídeo não tem áudio mesmo.
        "rich:video" - vídeo hospedado em outro servidor. será de um serviço externo (ex: youtube), obtenha o link em "url"
    Caso link, há 2 casos:
        Link para outro post do reddir: averiguar "crosspost_parent_list[0]" e então analisar o "post_hint" aqui dentro (será um objeto de outro post)
        Link para o mundo externo: não terá o campo "crosspost_parent_list". O link estará em "url_overridden_by_dest".
    Caso self não irá ocorrer, is_self bloqueia primeiro
    Há casos que não há nem is_self nem post_hint. Estes casos empiricamente (obtendo 20 posts de 24 subreddits) tem apenas uma url em url_overridden_by_dest. Serão salvos como link e precisam de mais investigação
Para requisitar mais posts, "requestResponse.data.after" terá o after para passar para próxima request

--------------------------------------------------------------------------------

GET SUBREDDIT COMMENT

https://www.reddit.com/dev/api/oauth#GET_comments_{article}

--------------------------------------------------------------------------------

(UN)SUBSCRIBE FROM A SUBREDDIT

https://www.reddit.com/dev/api/oauth#POST_api_subscribe

--------------------------------------------------------------------------------

UP/DOWN VOTE A POST/COMMENT

https://www.reddit.com/dev/api/oauth#POST_api_vote

--------------------------------------------------------------------------------
